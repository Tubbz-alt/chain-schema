// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chain_schema.proto

package chain_schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrimitiveType int32

const (
	BOOL        PrimitiveType = 0
	INT3        PrimitiveType = 1
	INT64       PrimitiveType = 2
	UINT32      PrimitiveType = 3
	UINT64      PrimitiveType = 4
	SINT32      PrimitiveType = 5
	SINT64      PrimitiveType = 6
	FIXED32     PrimitiveType = 7
	FIXED64     PrimitiveType = 8
	SFIXED32    PrimitiveType = 9
	SFIXED64    PrimitiveType = 10
	STRING      PrimitiveType = 11
	BYTES       PrimitiveType = 12
	BIG_INTEGER PrimitiveType = 13
	BIG_DECIMAL PrimitiveType = 14
	DATETIME    PrimitiveType = 15
	DURATION    PrimitiveType = 16
	INTERVAL    PrimitiveType = 17
)

var PrimitiveType_name = map[int32]string{
	0:  "BOOL",
	1:  "INT3",
	2:  "INT64",
	3:  "UINT32",
	4:  "UINT64",
	5:  "SINT32",
	6:  "SINT64",
	7:  "FIXED32",
	8:  "FIXED64",
	9:  "SFIXED32",
	10: "SFIXED64",
	11: "STRING",
	12: "BYTES",
	13: "BIG_INTEGER",
	14: "BIG_DECIMAL",
	15: "DATETIME",
	16: "DURATION",
	17: "INTERVAL",
}

var PrimitiveType_value = map[string]int32{
	"BOOL":        0,
	"INT3":        1,
	"INT64":       2,
	"UINT32":      3,
	"UINT64":      4,
	"SINT32":      5,
	"SINT64":      6,
	"FIXED32":     7,
	"FIXED64":     8,
	"SFIXED32":    9,
	"SFIXED64":    10,
	"STRING":      11,
	"BYTES":       12,
	"BIG_INTEGER": 13,
	"BIG_DECIMAL": 14,
	"DATETIME":    15,
	"DURATION":    16,
	"INTERVAL":    17,
}

func (PrimitiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{0}
}

type MethodType int32

const (
	TX    MethodType = 0
	QUERY MethodType = 1
	UTIL  MethodType = 2
)

var MethodType_name = map[int32]string{
	0: "TX",
	1: "QUERY",
	2: "UTIL",
}

var MethodType_value = map[string]int32{
	"TX":    0,
	"QUERY": 1,
	"UTIL":  2,
}

func (MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{1}
}

type TypeRef struct {
	// Types that are valid to be assigned to Info:
	//	*TypeRef_Primitive
	//	*TypeRef_DefinedType
	//	*TypeRef_Array
	//	*TypeRef_Optional
	Info isTypeRef_Info `protobuf_oneof:"info"`
}

func (m *TypeRef) Reset()      { *m = TypeRef{} }
func (*TypeRef) ProtoMessage() {}
func (*TypeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{0}
}
func (m *TypeRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeRef.Merge(m, src)
}
func (m *TypeRef) XXX_Size() int {
	return m.Size()
}
func (m *TypeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeRef.DiscardUnknown(m)
}

var xxx_messageInfo_TypeRef proto.InternalMessageInfo

type isTypeRef_Info interface {
	isTypeRef_Info()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TypeRef_Primitive struct {
	Primitive PrimitiveType `protobuf:"varint,1,opt,name=primitive,proto3,enum=chain_schema.PrimitiveType,oneof" json:"primitive,omitempty"`
}
type TypeRef_DefinedType struct {
	DefinedType int64 `protobuf:"varint,2,opt,name=defined_type,json=definedType,proto3,oneof" json:"defined_type,omitempty"`
}
type TypeRef_Array struct {
	Array *TypeRef `protobuf:"bytes,3,opt,name=array,proto3,oneof" json:"array,omitempty"`
}
type TypeRef_Optional struct {
	Optional *TypeRef `protobuf:"bytes,4,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (*TypeRef_Primitive) isTypeRef_Info()   {}
func (*TypeRef_DefinedType) isTypeRef_Info() {}
func (*TypeRef_Array) isTypeRef_Info()       {}
func (*TypeRef_Optional) isTypeRef_Info()    {}

func (m *TypeRef) GetInfo() isTypeRef_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *TypeRef) GetPrimitive() PrimitiveType {
	if x, ok := m.GetInfo().(*TypeRef_Primitive); ok {
		return x.Primitive
	}
	return BOOL
}

func (m *TypeRef) GetDefinedType() int64 {
	if x, ok := m.GetInfo().(*TypeRef_DefinedType); ok {
		return x.DefinedType
	}
	return 0
}

func (m *TypeRef) GetArray() *TypeRef {
	if x, ok := m.GetInfo().(*TypeRef_Array); ok {
		return x.Array
	}
	return nil
}

func (m *TypeRef) GetOptional() *TypeRef {
	if x, ok := m.GetInfo().(*TypeRef_Optional); ok {
		return x.Optional
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TypeRef) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TypeRef_Primitive)(nil),
		(*TypeRef_DefinedType)(nil),
		(*TypeRef_Array)(nil),
		(*TypeRef_Optional)(nil),
	}
}

type TypeDefinition struct {
	Namespace    int64  `protobuf:"varint,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Experimental bool   `protobuf:"varint,3,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*TypeDefinition_Struct
	//	*TypeDefinition_Enum
	//	*TypeDefinition_Interface
	Info isTypeDefinition_Info `protobuf_oneof:"info"`
}

func (m *TypeDefinition) Reset()      { *m = TypeDefinition{} }
func (*TypeDefinition) ProtoMessage() {}
func (*TypeDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{1}
}
func (m *TypeDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeDefinition.Merge(m, src)
}
func (m *TypeDefinition) XXX_Size() int {
	return m.Size()
}
func (m *TypeDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_TypeDefinition proto.InternalMessageInfo

type isTypeDefinition_Info interface {
	isTypeDefinition_Info()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TypeDefinition_Struct struct {
	Struct *Struct `protobuf:"bytes,4,opt,name=struct,proto3,oneof" json:"struct,omitempty"`
}
type TypeDefinition_Enum struct {
	Enum *Enum `protobuf:"bytes,5,opt,name=enum,proto3,oneof" json:"enum,omitempty"`
}
type TypeDefinition_Interface struct {
	Interface *Interface `protobuf:"bytes,6,opt,name=interface,proto3,oneof" json:"interface,omitempty"`
}

func (*TypeDefinition_Struct) isTypeDefinition_Info()    {}
func (*TypeDefinition_Enum) isTypeDefinition_Info()      {}
func (*TypeDefinition_Interface) isTypeDefinition_Info() {}

func (m *TypeDefinition) GetInfo() isTypeDefinition_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *TypeDefinition) GetNamespace() int64 {
	if m != nil {
		return m.Namespace
	}
	return 0
}

func (m *TypeDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TypeDefinition) GetExperimental() bool {
	if m != nil {
		return m.Experimental
	}
	return false
}

func (m *TypeDefinition) GetStruct() *Struct {
	if x, ok := m.GetInfo().(*TypeDefinition_Struct); ok {
		return x.Struct
	}
	return nil
}

func (m *TypeDefinition) GetEnum() *Enum {
	if x, ok := m.GetInfo().(*TypeDefinition_Enum); ok {
		return x.Enum
	}
	return nil
}

func (m *TypeDefinition) GetInterface() *Interface {
	if x, ok := m.GetInfo().(*TypeDefinition_Interface); ok {
		return x.Interface
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TypeDefinition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TypeDefinition_Struct)(nil),
		(*TypeDefinition_Enum)(nil),
		(*TypeDefinition_Interface)(nil),
	}
}

type Struct struct {
	Fields []*Field `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *Struct) Reset()      { *m = Struct{} }
func (*Struct) ProtoMessage() {}
func (*Struct) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{2}
}
func (m *Struct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Struct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Struct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Struct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Struct.Merge(m, src)
}
func (m *Struct) XXX_Size() int {
	return m.Size()
}
func (m *Struct) XXX_DiscardUnknown() {
	xxx_messageInfo_Struct.DiscardUnknown(m)
}

var xxx_messageInfo_Struct proto.InternalMessageInfo

func (m *Struct) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Field struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       *TypeRef `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ProtoField uint32   `protobuf:"varint,3,opt,name=proto_field,json=protoField,proto3" json:"proto_field,omitempty"`
}

func (m *Field) Reset()      { *m = Field{} }
func (*Field) ProtoMessage() {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{3}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Field.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return m.Size()
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() *TypeRef {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Field) GetProtoField() uint32 {
	if m != nil {
		return m.ProtoField
	}
	return 0
}

type Enum struct {
	Values []*EnumValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *Enum) Reset()      { *m = Enum{} }
func (*Enum) ProtoMessage() {}
func (*Enum) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{4}
}
func (m *Enum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enum.Merge(m, src)
}
func (m *Enum) XXX_Size() int {
	return m.Size()
}
func (m *Enum) XXX_DiscardUnknown() {
	xxx_messageInfo_Enum.DiscardUnknown(m)
}

var xxx_messageInfo_Enum proto.InternalMessageInfo

func (m *Enum) GetValues() []*EnumValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type EnumValue struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EnumValue) Reset()      { *m = EnumValue{} }
func (*EnumValue) ProtoMessage() {}
func (*EnumValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{5}
}
func (m *EnumValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnumValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnumValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnumValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumValue.Merge(m, src)
}
func (m *EnumValue) XXX_Size() int {
	return m.Size()
}
func (m *EnumValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumValue.DiscardUnknown(m)
}

var xxx_messageInfo_EnumValue proto.InternalMessageInfo

func (m *EnumValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnumValue) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Interface struct {
	Implementers []uint64 `protobuf:"varint,1,rep,packed,name=implementers,proto3" json:"implementers,omitempty"`
}

func (m *Interface) Reset()      { *m = Interface{} }
func (*Interface) ProtoMessage() {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{6}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetImplementers() []uint64 {
	if m != nil {
		return m.Implementers
	}
	return nil
}

type Method struct {
	Type   MethodType `protobuf:"varint,1,opt,name=type,proto3,enum=chain_schema.MethodType" json:"type,omitempty"`
	Input  *TypeRef   `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output *TypeRef   `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Method) Reset()      { *m = Method{} }
func (*Method) ProtoMessage() {}
func (*Method) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{7}
}
func (m *Method) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Method) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Method.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Method) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Method.Merge(m, src)
}
func (m *Method) XXX_Size() int {
	return m.Size()
}
func (m *Method) XXX_DiscardUnknown() {
	xxx_messageInfo_Method.DiscardUnknown(m)
}

var xxx_messageInfo_Method proto.InternalMessageInfo

func (m *Method) GetType() MethodType {
	if m != nil {
		return m.Type
	}
	return TX
}

func (m *Method) GetInput() *TypeRef {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Method) GetOutput() *TypeRef {
	if m != nil {
		return m.Output
	}
	return nil
}

type Table struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       *TypeRef `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	PrimaryKey []string `protobuf:"bytes,3,rep,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
}

func (m *Table) Reset()      { *m = Table{} }
func (*Table) ProtoMessage() {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{8}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table) GetType() *TypeRef {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Table) GetPrimaryKey() []string {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

// primary key
// indexes
type Table_IndexPartExpression struct {
	// Types that are valid to be assigned to Term:
	//	*Table_IndexPartExpression_Column
	//	*Table_IndexPartExpression_Fncall
	Term isTable_IndexPartExpression_Term `protobuf_oneof:"term"`
}

func (m *Table_IndexPartExpression) Reset()      { *m = Table_IndexPartExpression{} }
func (*Table_IndexPartExpression) ProtoMessage() {}
func (*Table_IndexPartExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{8, 0}
}
func (m *Table_IndexPartExpression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table_IndexPartExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table_IndexPartExpression.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table_IndexPartExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table_IndexPartExpression.Merge(m, src)
}
func (m *Table_IndexPartExpression) XXX_Size() int {
	return m.Size()
}
func (m *Table_IndexPartExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_Table_IndexPartExpression.DiscardUnknown(m)
}

var xxx_messageInfo_Table_IndexPartExpression proto.InternalMessageInfo

type isTable_IndexPartExpression_Term interface {
	isTable_IndexPartExpression_Term()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Table_IndexPartExpression_Column struct {
	Column string `protobuf:"bytes,1,opt,name=column,proto3,oneof" json:"column,omitempty"`
}
type Table_IndexPartExpression_Fncall struct {
	Fncall *Table_IndexPartExpression_FnCall `protobuf:"bytes,2,opt,name=fncall,proto3,oneof" json:"fncall,omitempty"`
}

func (*Table_IndexPartExpression_Column) isTable_IndexPartExpression_Term() {}
func (*Table_IndexPartExpression_Fncall) isTable_IndexPartExpression_Term() {}

func (m *Table_IndexPartExpression) GetTerm() isTable_IndexPartExpression_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (m *Table_IndexPartExpression) GetColumn() string {
	if x, ok := m.GetTerm().(*Table_IndexPartExpression_Column); ok {
		return x.Column
	}
	return ""
}

func (m *Table_IndexPartExpression) GetFncall() *Table_IndexPartExpression_FnCall {
	if x, ok := m.GetTerm().(*Table_IndexPartExpression_Fncall); ok {
		return x.Fncall
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Table_IndexPartExpression) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Table_IndexPartExpression_Column)(nil),
		(*Table_IndexPartExpression_Fncall)(nil),
	}
}

type Table_IndexPartExpression_FnCall struct {
	Fn   uint64                             `protobuf:"varint,1,opt,name=fn,proto3" json:"fn,omitempty"`
	Args []*Table_IndexPartExpression_FnArg `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *Table_IndexPartExpression_FnCall) Reset()      { *m = Table_IndexPartExpression_FnCall{} }
func (*Table_IndexPartExpression_FnCall) ProtoMessage() {}
func (*Table_IndexPartExpression_FnCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{8, 0, 0}
}
func (m *Table_IndexPartExpression_FnCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table_IndexPartExpression_FnCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table_IndexPartExpression_FnCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table_IndexPartExpression_FnCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table_IndexPartExpression_FnCall.Merge(m, src)
}
func (m *Table_IndexPartExpression_FnCall) XXX_Size() int {
	return m.Size()
}
func (m *Table_IndexPartExpression_FnCall) XXX_DiscardUnknown() {
	xxx_messageInfo_Table_IndexPartExpression_FnCall.DiscardUnknown(m)
}

var xxx_messageInfo_Table_IndexPartExpression_FnCall proto.InternalMessageInfo

func (m *Table_IndexPartExpression_FnCall) GetFn() uint64 {
	if m != nil {
		return m.Fn
	}
	return 0
}

func (m *Table_IndexPartExpression_FnCall) GetArgs() []*Table_IndexPartExpression_FnArg {
	if m != nil {
		return m.Args
	}
	return nil
}

type Table_IndexPartExpression_FnArg struct {
	Name  string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Table_IndexPartExpression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Table_IndexPartExpression_FnArg) Reset()      { *m = Table_IndexPartExpression_FnArg{} }
func (*Table_IndexPartExpression_FnArg) ProtoMessage() {}
func (*Table_IndexPartExpression_FnArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{8, 0, 1}
}
func (m *Table_IndexPartExpression_FnArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table_IndexPartExpression_FnArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table_IndexPartExpression_FnArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table_IndexPartExpression_FnArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table_IndexPartExpression_FnArg.Merge(m, src)
}
func (m *Table_IndexPartExpression_FnArg) XXX_Size() int {
	return m.Size()
}
func (m *Table_IndexPartExpression_FnArg) XXX_DiscardUnknown() {
	xxx_messageInfo_Table_IndexPartExpression_FnArg.DiscardUnknown(m)
}

var xxx_messageInfo_Table_IndexPartExpression_FnArg proto.InternalMessageInfo

func (m *Table_IndexPartExpression_FnArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table_IndexPartExpression_FnArg) GetValue() *Table_IndexPartExpression {
	if m != nil {
		return m.Value
	}
	return nil
}

type ModuleDef struct {
	Typedefs []*TypeDefinition `protobuf:"bytes,1,rep,name=typedefs,proto3" json:"typedefs,omitempty"`
	Methods  []*Method         `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
	Tables   []*Table          `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (m *ModuleDef) Reset()      { *m = ModuleDef{} }
func (*ModuleDef) ProtoMessage() {}
func (*ModuleDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{9}
}
func (m *ModuleDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleDef.Merge(m, src)
}
func (m *ModuleDef) XXX_Size() int {
	return m.Size()
}
func (m *ModuleDef) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleDef.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleDef proto.InternalMessageInfo

func (m *ModuleDef) GetTypedefs() []*TypeDefinition {
	if m != nil {
		return m.Typedefs
	}
	return nil
}

func (m *ModuleDef) GetMethods() []*Method {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *ModuleDef) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

type Index struct {
	// Types that are valid to be assigned to Term:
	//	*Index_Column
	//	*Index_Fncall
	Term isIndex_Term `protobuf_oneof:"term"`
}

func (m *Index) Reset()      { *m = Index{} }
func (*Index) ProtoMessage() {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{10}
}
func (m *Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return m.Size()
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

type isIndex_Term interface {
	isIndex_Term()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Index_Column struct {
	Column string `protobuf:"bytes,1,opt,name=column,proto3,oneof" json:"column,omitempty"`
}
type Index_Fncall struct {
	Fncall *Index_FnCall `protobuf:"bytes,2,opt,name=fncall,proto3,oneof" json:"fncall,omitempty"`
}

func (*Index_Column) isIndex_Term() {}
func (*Index_Fncall) isIndex_Term() {}

func (m *Index) GetTerm() isIndex_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (m *Index) GetColumn() string {
	if x, ok := m.GetTerm().(*Index_Column); ok {
		return x.Column
	}
	return ""
}

func (m *Index) GetFncall() *Index_FnCall {
	if x, ok := m.GetTerm().(*Index_Fncall); ok {
		return x.Fncall
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Index) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Index_Column)(nil),
		(*Index_Fncall)(nil),
	}
}

type Index_FnCall struct {
	Fn   uint64         `protobuf:"varint,1,opt,name=fn,proto3" json:"fn,omitempty"`
	Args []*Index_FnArg `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *Index_FnCall) Reset()      { *m = Index_FnCall{} }
func (*Index_FnCall) ProtoMessage() {}
func (*Index_FnCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{10, 0}
}
func (m *Index_FnCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Index_FnCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Index_FnCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Index_FnCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index_FnCall.Merge(m, src)
}
func (m *Index_FnCall) XXX_Size() int {
	return m.Size()
}
func (m *Index_FnCall) XXX_DiscardUnknown() {
	xxx_messageInfo_Index_FnCall.DiscardUnknown(m)
}

var xxx_messageInfo_Index_FnCall proto.InternalMessageInfo

func (m *Index_FnCall) GetFn() uint64 {
	if m != nil {
		return m.Fn
	}
	return 0
}

func (m *Index_FnCall) GetArgs() []*Index_FnArg {
	if m != nil {
		return m.Args
	}
	return nil
}

type Index_FnArg struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Index `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Index_FnArg) Reset()      { *m = Index_FnArg{} }
func (*Index_FnArg) ProtoMessage() {}
func (*Index_FnArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{10, 1}
}
func (m *Index_FnArg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Index_FnArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Index_FnArg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Index_FnArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index_FnArg.Merge(m, src)
}
func (m *Index_FnArg) XXX_Size() int {
	return m.Size()
}
func (m *Index_FnArg) XXX_DiscardUnknown() {
	xxx_messageInfo_Index_FnArg.DiscardUnknown(m)
}

var xxx_messageInfo_Index_FnArg proto.InternalMessageInfo

func (m *Index_FnArg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Index_FnArg) GetValue() *Index {
	if m != nil {
		return m.Value
	}
	return nil
}

type AnInterface struct {
}

func (m *AnInterface) Reset()      { *m = AnInterface{} }
func (*AnInterface) ProtoMessage() {}
func (*AnInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_87fbb4634437c5fc, []int{11}
}
func (m *AnInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnInterface.Merge(m, src)
}
func (m *AnInterface) XXX_Size() int {
	return m.Size()
}
func (m *AnInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_AnInterface.DiscardUnknown(m)
}

var xxx_messageInfo_AnInterface proto.InternalMessageInfo

var E_RuntimeInterface = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         64501,
	Name:          "chain_schema.runtime_interface",
	Tag:           "varint,64501,opt,name=runtime_interface",
	Filename:      "chain_schema.proto",
}

var E_PrimaryKey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         64502,
	Name:          "chain_schema.primary_key",
	Tag:           "bytes,64502,rep,name=primary_key",
	Filename:      "chain_schema.proto",
}

var E_Index = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: ([]*Index)(nil),
	Field:         64503,
	Name:          "chain_schema.index",
	Tag:           "bytes,64503,rep,name=index",
	Filename:      "chain_schema.proto",
}

func init() {
	proto.RegisterEnum("chain_schema.PrimitiveType", PrimitiveType_name, PrimitiveType_value)
	proto.RegisterEnum("chain_schema.MethodType", MethodType_name, MethodType_value)
	proto.RegisterType((*TypeRef)(nil), "chain_schema.TypeRef")
	proto.RegisterType((*TypeDefinition)(nil), "chain_schema.TypeDefinition")
	proto.RegisterType((*Struct)(nil), "chain_schema.Struct")
	proto.RegisterType((*Field)(nil), "chain_schema.Field")
	proto.RegisterType((*Enum)(nil), "chain_schema.Enum")
	proto.RegisterType((*EnumValue)(nil), "chain_schema.EnumValue")
	proto.RegisterType((*Interface)(nil), "chain_schema.Interface")
	proto.RegisterType((*Method)(nil), "chain_schema.Method")
	proto.RegisterType((*Table)(nil), "chain_schema.Table")
	proto.RegisterType((*Table_IndexPartExpression)(nil), "chain_schema.Table.IndexPartExpression")
	proto.RegisterType((*Table_IndexPartExpression_FnCall)(nil), "chain_schema.Table.IndexPartExpression.FnCall")
	proto.RegisterType((*Table_IndexPartExpression_FnArg)(nil), "chain_schema.Table.IndexPartExpression.FnArg")
	proto.RegisterType((*ModuleDef)(nil), "chain_schema.ModuleDef")
	proto.RegisterType((*Index)(nil), "chain_schema.Index")
	proto.RegisterType((*Index_FnCall)(nil), "chain_schema.Index.FnCall")
	proto.RegisterType((*Index_FnArg)(nil), "chain_schema.Index.FnArg")
	proto.RegisterType((*AnInterface)(nil), "chain_schema.AnInterface")
	proto.RegisterExtension(E_RuntimeInterface)
	proto.RegisterExtension(E_PrimaryKey)
	proto.RegisterExtension(E_Index)
}

func init() { proto.RegisterFile("chain_schema.proto", fileDescriptor_87fbb4634437c5fc) }

var fileDescriptor_87fbb4634437c5fc = []byte{
	// 1095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x53, 0xdb, 0x46,
	0x14, 0x97, 0x6c, 0x59, 0xd8, 0xcf, 0x84, 0x28, 0x4b, 0x3a, 0x51, 0x69, 0x46, 0xf1, 0xa8, 0x87,
	0x9a, 0xa4, 0x98, 0x19, 0xe3, 0x90, 0x0e, 0x9d, 0x1e, 0xec, 0x60, 0xb0, 0xa6, 0x60, 0xd2, 0x45,
	0x64, 0x92, 0xf6, 0xe0, 0x11, 0xf6, 0xda, 0x68, 0xaa, 0x7f, 0x23, 0xc9, 0x19, 0x7c, 0x6b, 0xbf,
	0x41, 0xa7, 0x1f, 0xa1, 0xd3, 0x43, 0x3e, 0x43, 0x2f, 0xbd, 0xf6, 0xc8, 0xad, 0x39, 0x16, 0x73,
	0xe9, 0x91, 0x4b, 0xcb, 0xb5, 0xb3, 0x2b, 0x59, 0x46, 0x60, 0x48, 0x0e, 0xbd, 0xed, 0xbe, 0xf7,
	0x7b, 0x7f, 0x7f, 0x6f, 0x9f, 0x04, 0xa8, 0x7b, 0x64, 0x98, 0x4e, 0x27, 0xe8, 0x1e, 0x11, 0xdb,
	0xa8, 0x78, 0xbe, 0x1b, 0xba, 0x68, 0xfe, 0xb2, 0x6c, 0xa9, 0x34, 0x70, 0xdd, 0x81, 0x45, 0x56,
	0x99, 0xee, 0x70, 0xd8, 0x5f, 0xed, 0x91, 0xa0, 0xeb, 0x9b, 0x5e, 0xe8, 0xfa, 0x11, 0x5e, 0xfd,
	0x93, 0x87, 0x39, 0x7d, 0xe4, 0x11, 0x4c, 0xfa, 0xe8, 0x4b, 0x28, 0x78, 0xbe, 0x69, 0x9b, 0xa1,
	0xf9, 0x86, 0xc8, 0x7c, 0x89, 0x2f, 0x2f, 0x54, 0x3f, 0xa9, 0xa4, 0x62, 0xbc, 0x98, 0xa8, 0xa9,
	0x49, 0x8b, 0xc3, 0x53, 0x3c, 0xfa, 0x14, 0xe6, 0x7b, 0xa4, 0x6f, 0x3a, 0xa4, 0xd7, 0x09, 0x47,
	0x1e, 0x91, 0x33, 0x25, 0xbe, 0x9c, 0x6d, 0x71, 0xb8, 0x18, 0x4b, 0xa9, 0x05, 0x5a, 0x81, 0x9c,
	0xe1, 0xfb, 0xc6, 0x48, 0xce, 0x96, 0xf8, 0x72, 0xb1, 0xfa, 0x51, 0xda, 0x7b, 0x9c, 0x47, 0x8b,
	0xc3, 0x11, 0x0a, 0xad, 0x41, 0xde, 0xf5, 0x42, 0xd3, 0x75, 0x0c, 0x4b, 0x16, 0x6e, 0xb7, 0x48,
	0x80, 0x0d, 0x11, 0x04, 0xd3, 0xe9, 0xbb, 0xea, 0x8f, 0x19, 0x58, 0xa0, 0xfa, 0x4d, 0x1a, 0xdf,
	0xa4, 0x4a, 0xf4, 0x10, 0x0a, 0x8e, 0x61, 0x93, 0xc0, 0x33, 0xba, 0x51, 0x81, 0x59, 0x3c, 0x15,
	0x20, 0x04, 0x02, 0xbd, 0xb0, 0xcc, 0x0b, 0x98, 0x9d, 0x91, 0x0a, 0xf3, 0xe4, 0xd8, 0x23, 0xbe,
	0x69, 0x13, 0x27, 0x34, 0x2c, 0x96, 0x77, 0x1e, 0xa7, 0x64, 0xa8, 0x02, 0x62, 0x10, 0xfa, 0xc3,
	0x6e, 0x18, 0xe7, 0x78, 0x3f, 0x9d, 0xe3, 0x3e, 0xd3, 0xb5, 0x38, 0x1c, 0xa3, 0x50, 0x19, 0x04,
	0xe2, 0x0c, 0x6d, 0x39, 0xc7, 0xd0, 0x28, 0x8d, 0x6e, 0x3a, 0x43, 0xbb, 0xc5, 0x61, 0x86, 0x40,
	0xcf, 0xa0, 0x60, 0x3a, 0x21, 0xf1, 0xfb, 0x34, 0x5f, 0x91, 0xc1, 0x1f, 0xa4, 0xe1, 0xda, 0x44,
	0x4d, 0xc9, 0x48, 0xb0, 0x49, 0x0f, 0x9e, 0x82, 0x18, 0x85, 0x47, 0x4f, 0x40, 0xec, 0x9b, 0xc4,
	0xea, 0x05, 0x72, 0xb6, 0x94, 0x2d, 0x17, 0xab, 0x8b, 0x69, 0x3f, 0x5b, 0x54, 0x87, 0x63, 0x88,
	0x3a, 0x80, 0x1c, 0x13, 0x24, 0x2d, 0xe1, 0x2f, 0xb5, 0x64, 0x19, 0x84, 0x84, 0xe0, 0x9b, 0x08,
	0xc1, 0x0c, 0x82, 0x1e, 0x41, 0x91, 0x4d, 0x59, 0x87, 0xf9, 0x65, 0xcd, 0xbb, 0x83, 0x81, 0x89,
	0x98, 0x7f, 0xf5, 0x19, 0x08, 0xb4, 0x60, 0xb4, 0x0a, 0xe2, 0x1b, 0xc3, 0x1a, 0x92, 0x49, 0x76,
	0x0f, 0xae, 0x37, 0xe5, 0x25, 0xd5, 0xe3, 0x18, 0xa6, 0x3e, 0x85, 0x42, 0x22, 0x9c, 0x99, 0xe5,
	0x7d, 0xc8, 0x31, 0x28, 0x4b, 0x33, 0x87, 0xa3, 0x8b, 0xba, 0x0a, 0x85, 0xa4, 0x63, 0x94, 0x5b,
	0xd3, 0xf6, 0x2c, 0x42, 0x69, 0x24, 0x7e, 0x20, 0xf3, 0xa5, 0x6c, 0x59, 0xc0, 0x29, 0x99, 0xfa,
	0x33, 0x0f, 0xe2, 0x2e, 0x09, 0x8f, 0xdc, 0x1e, 0xfa, 0x3c, 0xae, 0x3b, 0x7a, 0x18, 0x72, 0x3a,
	0xc3, 0x08, 0xc3, 0xaa, 0x8f, 0x4a, 0x7f, 0x02, 0x39, 0xd3, 0xf1, 0x86, 0xe1, 0xed, 0x6d, 0x8a,
	0x30, 0x68, 0x05, 0x44, 0x77, 0x18, 0x52, 0xf4, 0x6d, 0xef, 0x02, 0xc7, 0x20, 0xf5, 0xd7, 0x2c,
	0xe4, 0x74, 0xe3, 0xd0, 0x22, 0xff, 0x0b, 0x3f, 0xa6, 0x6d, 0xf8, 0xa3, 0xce, 0xf7, 0x64, 0xc4,
	0x7a, 0x5f, 0xa0, 0xfc, 0x30, 0xd1, 0xd7, 0x64, 0xb4, 0xf4, 0x5b, 0x06, 0x16, 0x35, 0xa7, 0x47,
	0x8e, 0x5f, 0x18, 0x7e, 0xd8, 0x3c, 0xf6, 0x7c, 0x12, 0x04, 0xf4, 0x21, 0xc9, 0x20, 0x76, 0x5d,
	0x6b, 0x68, 0x3b, 0x51, 0x64, 0x3a, 0xdc, 0xd1, 0x1d, 0xb5, 0x40, 0xec, 0x3b, 0x5d, 0xc3, 0xb2,
	0xe2, 0xf8, 0x95, 0x2b, 0xf1, 0x69, 0xda, 0x95, 0x19, 0x2e, 0x2b, 0x5b, 0xce, 0x73, 0xc3, 0xb2,
	0xa8, 0xa7, 0xc8, 0x7e, 0xe9, 0x3b, 0x10, 0x23, 0x19, 0x5a, 0x80, 0x4c, 0x3f, 0x8a, 0x24, 0xe0,
	0x4c, 0xdf, 0x41, 0x75, 0x10, 0x0c, 0x7f, 0x10, 0xc8, 0x19, 0x36, 0x2b, 0x2b, 0x1f, 0x1e, 0xa1,
	0xee, 0x0f, 0x30, 0x33, 0x5d, 0xfa, 0x16, 0x72, 0xec, 0x3a, 0xb3, 0x83, 0x5f, 0x5d, 0x9e, 0x9d,
	0x62, 0xf5, 0xb3, 0x0f, 0x0c, 0x10, 0x0f, 0x19, 0x7d, 0x7c, 0x21, 0xf1, 0x6d, 0xf5, 0x17, 0x1e,
	0x0a, 0xbb, 0x6e, 0x6f, 0x68, 0xd1, 0x15, 0x84, 0xbe, 0x80, 0x3c, 0xed, 0x79, 0x8f, 0xf4, 0xa3,
	0x49, 0x2b, 0x56, 0x1f, 0x5e, 0xa7, 0x66, 0xba, 0xab, 0x70, 0x82, 0x46, 0x15, 0x98, 0xb3, 0xd9,
	0x78, 0x4d, 0x2a, 0xbe, 0x3f, 0x6b, 0xf6, 0xf0, 0x04, 0x44, 0x9f, 0x7a, 0x48, 0x73, 0xbc, 0xe1,
	0xa9, 0xb3, 0xfc, 0x71, 0x0c, 0x51, 0xcf, 0x79, 0xc8, 0xb1, 0x5a, 0x6e, 0xe1, 0xb4, 0x76, 0x85,
	0xd3, 0xa5, 0xab, 0x3b, 0xa8, 0x47, 0x8e, 0xaf, 0xf3, 0xb7, 0x7d, 0x23, 0x7f, 0x2b, 0x29, 0xfe,
	0x3e, 0x9e, 0xed, 0x6d, 0xca, 0xd5, 0xd6, 0x6d, 0x5c, 0x2d, 0xa7, 0xb9, 0x5a, 0x9c, 0xe1, 0xec,
	0x2a, 0x2f, 0x8b, 0x50, 0xac, 0x3b, 0xc9, 0x1a, 0xd8, 0x10, 0xde, 0xfe, 0xfe, 0x88, 0x7f, 0x7c,
	0xc1, 0xc3, 0x9d, 0xd4, 0xd7, 0x0d, 0xe5, 0x41, 0x68, 0xec, 0xed, 0xed, 0x48, 0x1c, 0x3d, 0x69,
	0x6d, 0x7d, 0x4d, 0xe2, 0x51, 0x01, 0x72, 0x5a, 0x5b, 0x5f, 0xaf, 0x49, 0x19, 0x04, 0x20, 0x1e,
	0x50, 0x69, 0x55, 0xca, 0x4e, 0xce, 0xeb, 0x35, 0x49, 0xa0, 0xe7, 0xfd, 0x48, 0x9e, 0x9b, 0x9c,
	0xd7, 0x6b, 0x92, 0x88, 0x8a, 0x30, 0xb7, 0xa5, 0xbd, 0x6a, 0x6e, 0xae, 0x55, 0xa5, 0xb9, 0xe4,
	0xb2, 0x5e, 0x93, 0xf2, 0x68, 0x1e, 0xf2, 0xfb, 0x13, 0x55, 0x61, 0x7a, 0x5b, 0xaf, 0x49, 0xc0,
	0x3c, 0xe8, 0x58, 0x6b, 0x6f, 0x4b, 0x45, 0x1a, 0xbc, 0xf1, 0x5a, 0x6f, 0xee, 0x4b, 0xf3, 0xe8,
	0x2e, 0x14, 0x1b, 0xda, 0x76, 0x47, 0x6b, 0xeb, 0xcd, 0xed, 0x26, 0x96, 0xee, 0x4c, 0x04, 0x9b,
	0xcd, 0xe7, 0xda, 0x6e, 0x7d, 0x47, 0x5a, 0xa0, 0x6e, 0x36, 0xeb, 0x7a, 0x53, 0xd7, 0x76, 0x9b,
	0xd2, 0x5d, 0x76, 0x3b, 0xc0, 0x75, 0x5d, 0xdb, 0x6b, 0x4b, 0x12, 0xbd, 0x51, 0x4b, 0xfc, 0xb2,
	0xbe, 0x23, 0xdd, 0x7b, 0xbc, 0x0c, 0x30, 0xdd, 0x5e, 0x48, 0x84, 0x8c, 0xfe, 0x4a, 0xe2, 0x68,
	0xb0, 0x6f, 0x0e, 0x9a, 0xf8, 0xb5, 0xc4, 0xd3, 0xf2, 0x0f, 0x74, 0x6d, 0x47, 0xca, 0x6c, 0xb4,
	0xe1, 0x9e, 0x3f, 0x74, 0x42, 0xd3, 0x26, 0x9d, 0xe4, 0x5b, 0x83, 0x1e, 0x55, 0xa2, 0x9f, 0x8c,
	0xca, 0xe4, 0x27, 0xa3, 0xb2, 0x4b, 0x82, 0xc0, 0x18, 0x90, 0x3d, 0xf6, 0x45, 0x0e, 0xe4, 0x7f,
	0x2e, 0xa2, 0xaf, 0xa6, 0x14, 0xdb, 0x4e, 0x5b, 0xdf, 0x48, 0xed, 0x9f, 0xf7, 0x7b, 0xfa, 0xf7,
	0xe2, 0xda, 0x8a, 0xda, 0xd8, 0xa1, 0x8b, 0x96, 0xce, 0xef, 0x7b, 0xad, 0x2f, 0x2e, 0x66, 0xbe,
	0x87, 0x78, 0x46, 0x98, 0x93, 0x46, 0xed, 0xe4, 0x54, 0xe1, 0xde, 0x9d, 0x2a, 0xdc, 0xf9, 0xa9,
	0xc2, 0xff, 0x30, 0x56, 0xf8, 0xb7, 0x63, 0x85, 0xff, 0x63, 0xac, 0xf0, 0x27, 0x63, 0x85, 0xff,
	0x6b, 0xac, 0xf0, 0x7f, 0x8f, 0x15, 0xee, 0x7c, 0xac, 0xf0, 0x3f, 0x9d, 0x29, 0xdc, 0xc9, 0x99,
	0xc2, 0xbd, 0x3b, 0x53, 0xb8, 0x43, 0x91, 0x85, 0x5c, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x73,
	0x07, 0x43, 0x4f, 0x91, 0x09, 0x00, 0x00,
}

func (x PrimitiveType) String() string {
	s, ok := PrimitiveType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MethodType) String() string {
	s, ok := MethodType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TypeRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeRef)
	if !ok {
		that2, ok := that.(TypeRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Info == nil {
		if this.Info != nil {
			return false
		}
	} else if this.Info == nil {
		return false
	} else if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *TypeRef_Primitive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeRef_Primitive)
	if !ok {
		that2, ok := that.(TypeRef_Primitive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Primitive != that1.Primitive {
		return false
	}
	return true
}
func (this *TypeRef_DefinedType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeRef_DefinedType)
	if !ok {
		that2, ok := that.(TypeRef_DefinedType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefinedType != that1.DefinedType {
		return false
	}
	return true
}
func (this *TypeRef_Array) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeRef_Array)
	if !ok {
		that2, ok := that.(TypeRef_Array)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Array.Equal(that1.Array) {
		return false
	}
	return true
}
func (this *TypeRef_Optional) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeRef_Optional)
	if !ok {
		that2, ok := that.(TypeRef_Optional)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Optional.Equal(that1.Optional) {
		return false
	}
	return true
}
func (this *TypeDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDefinition)
	if !ok {
		that2, ok := that.(TypeDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Experimental != that1.Experimental {
		return false
	}
	if that1.Info == nil {
		if this.Info != nil {
			return false
		}
	} else if this.Info == nil {
		return false
	} else if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *TypeDefinition_Struct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDefinition_Struct)
	if !ok {
		that2, ok := that.(TypeDefinition_Struct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Struct.Equal(that1.Struct) {
		return false
	}
	return true
}
func (this *TypeDefinition_Enum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDefinition_Enum)
	if !ok {
		that2, ok := that.(TypeDefinition_Enum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enum.Equal(that1.Enum) {
		return false
	}
	return true
}
func (this *TypeDefinition_Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeDefinition_Interface)
	if !ok {
		that2, ok := that.(TypeDefinition_Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	return true
}
func (this *Struct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Struct)
	if !ok {
		that2, ok := that.(Struct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *Field) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field)
	if !ok {
		that2, ok := that.(Field)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if this.ProtoField != that1.ProtoField {
		return false
	}
	return true
}
func (this *Enum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enum)
	if !ok {
		that2, ok := that.(Enum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *EnumValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnumValue)
	if !ok {
		that2, ok := that.(EnumValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface)
	if !ok {
		that2, ok := that.(Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Implementers) != len(that1.Implementers) {
		return false
	}
	for i := range this.Implementers {
		if this.Implementers[i] != that1.Implementers[i] {
			return false
		}
	}
	return true
}
func (this *Method) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Method)
	if !ok {
		that2, ok := that.(Method)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *Table) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table)
	if !ok {
		that2, ok := that.(Table)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if len(this.PrimaryKey) != len(that1.PrimaryKey) {
		return false
	}
	for i := range this.PrimaryKey {
		if this.PrimaryKey[i] != that1.PrimaryKey[i] {
			return false
		}
	}
	return true
}
func (this *Table_IndexPartExpression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table_IndexPartExpression)
	if !ok {
		that2, ok := that.(Table_IndexPartExpression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Term == nil {
		if this.Term != nil {
			return false
		}
	} else if this.Term == nil {
		return false
	} else if !this.Term.Equal(that1.Term) {
		return false
	}
	return true
}
func (this *Table_IndexPartExpression_Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table_IndexPartExpression_Column)
	if !ok {
		that2, ok := that.(Table_IndexPartExpression_Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Column != that1.Column {
		return false
	}
	return true
}
func (this *Table_IndexPartExpression_Fncall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table_IndexPartExpression_Fncall)
	if !ok {
		that2, ok := that.(Table_IndexPartExpression_Fncall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fncall.Equal(that1.Fncall) {
		return false
	}
	return true
}
func (this *Table_IndexPartExpression_FnCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table_IndexPartExpression_FnCall)
	if !ok {
		that2, ok := that.(Table_IndexPartExpression_FnCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fn != that1.Fn {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *Table_IndexPartExpression_FnArg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Table_IndexPartExpression_FnArg)
	if !ok {
		that2, ok := that.(Table_IndexPartExpression_FnArg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ModuleDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModuleDef)
	if !ok {
		that2, ok := that.(ModuleDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Typedefs) != len(that1.Typedefs) {
		return false
	}
	for i := range this.Typedefs {
		if !this.Typedefs[i].Equal(that1.Typedefs[i]) {
			return false
		}
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if !this.Methods[i].Equal(that1.Methods[i]) {
			return false
		}
	}
	if len(this.Tables) != len(that1.Tables) {
		return false
	}
	for i := range this.Tables {
		if !this.Tables[i].Equal(that1.Tables[i]) {
			return false
		}
	}
	return true
}
func (this *Index) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index)
	if !ok {
		that2, ok := that.(Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Term == nil {
		if this.Term != nil {
			return false
		}
	} else if this.Term == nil {
		return false
	} else if !this.Term.Equal(that1.Term) {
		return false
	}
	return true
}
func (this *Index_Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index_Column)
	if !ok {
		that2, ok := that.(Index_Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Column != that1.Column {
		return false
	}
	return true
}
func (this *Index_Fncall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index_Fncall)
	if !ok {
		that2, ok := that.(Index_Fncall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Fncall.Equal(that1.Fncall) {
		return false
	}
	return true
}
func (this *Index_FnCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index_FnCall)
	if !ok {
		that2, ok := that.(Index_FnCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fn != that1.Fn {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *Index_FnArg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index_FnArg)
	if !ok {
		that2, ok := that.(Index_FnArg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *AnInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AnInterface)
	if !ok {
		that2, ok := that.(AnInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TypeRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chain_schema.TypeRef{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TypeRef_Primitive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeRef_Primitive{` +
		`Primitive:` + fmt.Sprintf("%#v", this.Primitive) + `}`}, ", ")
	return s
}
func (this *TypeRef_DefinedType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeRef_DefinedType{` +
		`DefinedType:` + fmt.Sprintf("%#v", this.DefinedType) + `}`}, ", ")
	return s
}
func (this *TypeRef_Array) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeRef_Array{` +
		`Array:` + fmt.Sprintf("%#v", this.Array) + `}`}, ", ")
	return s
}
func (this *TypeRef_Optional) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeRef_Optional{` +
		`Optional:` + fmt.Sprintf("%#v", this.Optional) + `}`}, ", ")
	return s
}
func (this *TypeDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&chain_schema.TypeDefinition{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Experimental: "+fmt.Sprintf("%#v", this.Experimental)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TypeDefinition_Struct) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeDefinition_Struct{` +
		`Struct:` + fmt.Sprintf("%#v", this.Struct) + `}`}, ", ")
	return s
}
func (this *TypeDefinition_Enum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeDefinition_Enum{` +
		`Enum:` + fmt.Sprintf("%#v", this.Enum) + `}`}, ", ")
	return s
}
func (this *TypeDefinition_Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.TypeDefinition_Interface{` +
		`Interface:` + fmt.Sprintf("%#v", this.Interface) + `}`}, ", ")
	return s
}
func (this *Struct) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chain_schema.Struct{")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Field) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chain_schema.Field{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "ProtoField: "+fmt.Sprintf("%#v", this.ProtoField)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Enum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chain_schema.Enum{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnumValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.EnumValue{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chain_schema.Interface{")
	s = append(s, "Implementers: "+fmt.Sprintf("%#v", this.Implementers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Method) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chain_schema.Method{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chain_schema.Table{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "PrimaryKey: "+fmt.Sprintf("%#v", this.PrimaryKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table_IndexPartExpression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.Table_IndexPartExpression{")
	if this.Term != nil {
		s = append(s, "Term: "+fmt.Sprintf("%#v", this.Term)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table_IndexPartExpression_Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.Table_IndexPartExpression_Column{` +
		`Column:` + fmt.Sprintf("%#v", this.Column) + `}`}, ", ")
	return s
}
func (this *Table_IndexPartExpression_Fncall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.Table_IndexPartExpression_Fncall{` +
		`Fncall:` + fmt.Sprintf("%#v", this.Fncall) + `}`}, ", ")
	return s
}
func (this *Table_IndexPartExpression_FnCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.Table_IndexPartExpression_FnCall{")
	s = append(s, "Fn: "+fmt.Sprintf("%#v", this.Fn)+",\n")
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Table_IndexPartExpression_FnArg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.Table_IndexPartExpression_FnArg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModuleDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chain_schema.ModuleDef{")
	if this.Typedefs != nil {
		s = append(s, "Typedefs: "+fmt.Sprintf("%#v", this.Typedefs)+",\n")
	}
	if this.Methods != nil {
		s = append(s, "Methods: "+fmt.Sprintf("%#v", this.Methods)+",\n")
	}
	if this.Tables != nil {
		s = append(s, "Tables: "+fmt.Sprintf("%#v", this.Tables)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Index) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.Index{")
	if this.Term != nil {
		s = append(s, "Term: "+fmt.Sprintf("%#v", this.Term)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Index_Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.Index_Column{` +
		`Column:` + fmt.Sprintf("%#v", this.Column) + `}`}, ", ")
	return s
}
func (this *Index_Fncall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&chain_schema.Index_Fncall{` +
		`Fncall:` + fmt.Sprintf("%#v", this.Fncall) + `}`}, ", ")
	return s
}
func (this *Index_FnCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.Index_FnCall{")
	s = append(s, "Fn: "+fmt.Sprintf("%#v", this.Fn)+",\n")
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Index_FnArg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chain_schema.Index_FnArg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&chain_schema.AnInterface{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChainSchema(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TypeRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TypeRef_Primitive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeRef_Primitive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChainSchema(dAtA, i, uint64(m.Primitive))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *TypeRef_DefinedType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeRef_DefinedType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintChainSchema(dAtA, i, uint64(m.DefinedType))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *TypeRef_Array) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeRef_Array) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Array != nil {
		{
			size, err := m.Array.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TypeRef_Optional) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeRef_Optional) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Optional != nil {
		{
			size, err := m.Optional.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TypeDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Experimental {
		i--
		if m.Experimental {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Namespace != 0 {
		i = encodeVarintChainSchema(dAtA, i, uint64(m.Namespace))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TypeDefinition_Struct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDefinition_Struct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Struct != nil {
		{
			size, err := m.Struct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TypeDefinition_Enum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDefinition_Enum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enum != nil {
		{
			size, err := m.Enum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TypeDefinition_Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeDefinition_Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Struct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Struct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Struct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Field) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtoField != 0 {
		i = encodeVarintChainSchema(dAtA, i, uint64(m.ProtoField))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Enum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnumValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnumValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnumValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintChainSchema(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Implementers) > 0 {
		dAtA8 := make([]byte, len(m.Implementers)*10)
		var j7 int
		for _, num := range m.Implementers {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintChainSchema(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Method) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Method) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Method) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintChainSchema(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrimaryKey) > 0 {
		for iNdEx := len(m.PrimaryKey) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrimaryKey[iNdEx])
			copy(dAtA[i:], m.PrimaryKey[iNdEx])
			i = encodeVarintChainSchema(dAtA, i, uint64(len(m.PrimaryKey[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Table_IndexPartExpression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table_IndexPartExpression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table_IndexPartExpression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != nil {
		{
			size := m.Term.Size()
			i -= size
			if _, err := m.Term.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Table_IndexPartExpression_Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table_IndexPartExpression_Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Column)
	copy(dAtA[i:], m.Column)
	i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Column)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Table_IndexPartExpression_Fncall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table_IndexPartExpression_Fncall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fncall != nil {
		{
			size, err := m.Fncall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Table_IndexPartExpression_FnCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table_IndexPartExpression_FnCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table_IndexPartExpression_FnCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Fn != 0 {
		i = encodeVarintChainSchema(dAtA, i, uint64(m.Fn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Table_IndexPartExpression_FnArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table_IndexPartExpression_FnArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table_IndexPartExpression_FnArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Methods) > 0 {
		for iNdEx := len(m.Methods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Methods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Typedefs) > 0 {
		for iNdEx := len(m.Typedefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Typedefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != nil {
		{
			size := m.Term.Size()
			i -= size
			if _, err := m.Term.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Index_Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index_Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Column)
	copy(dAtA[i:], m.Column)
	i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Column)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Index_Fncall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index_Fncall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fncall != nil {
		{
			size, err := m.Fncall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Index_FnCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index_FnCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index_FnCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Fn != 0 {
		i = encodeVarintChainSchema(dAtA, i, uint64(m.Fn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Index_FnArg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index_FnArg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index_FnArg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintChainSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TypeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		n += m.Info.Size()
	}
	return n
}

func (m *TypeRef_Primitive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChainSchema(uint64(m.Primitive))
	return n
}
func (m *TypeRef_DefinedType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovChainSchema(uint64(m.DefinedType))
	return n
}
func (m *TypeRef_Array) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Array != nil {
		l = m.Array.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *TypeRef_Optional) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Optional != nil {
		l = m.Optional.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *TypeDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != 0 {
		n += 1 + sovChainSchema(uint64(m.Namespace))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Experimental {
		n += 2
	}
	if m.Info != nil {
		n += m.Info.Size()
	}
	return n
}

func (m *TypeDefinition_Struct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Struct != nil {
		l = m.Struct.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *TypeDefinition_Enum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enum != nil {
		l = m.Enum.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *TypeDefinition_Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *Struct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	return n
}

func (m *Field) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.ProtoField != 0 {
		n += 1 + sovChainSchema(uint64(m.ProtoField))
	}
	return n
}

func (m *Enum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	return n
}

func (m *EnumValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovChainSchema(uint64(m.Value))
	}
	return n
}

func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Implementers) > 0 {
		l = 0
		for _, e := range m.Implementers {
			l += sovChainSchema(uint64(e))
		}
		n += 1 + sovChainSchema(uint64(l)) + l
	}
	return n
}

func (m *Method) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovChainSchema(uint64(m.Type))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if len(m.PrimaryKey) > 0 {
		for _, s := range m.PrimaryKey {
			l = len(s)
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	return n
}

func (m *Table_IndexPartExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != nil {
		n += m.Term.Size()
	}
	return n
}

func (m *Table_IndexPartExpression_Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Column)
	n += 1 + l + sovChainSchema(uint64(l))
	return n
}
func (m *Table_IndexPartExpression_Fncall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fncall != nil {
		l = m.Fncall.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *Table_IndexPartExpression_FnCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fn != 0 {
		n += 1 + sovChainSchema(uint64(m.Fn))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	return n
}

func (m *Table_IndexPartExpression_FnArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}

func (m *ModuleDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Typedefs) > 0 {
		for _, e := range m.Typedefs {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	if len(m.Methods) > 0 {
		for _, e := range m.Methods {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	return n
}

func (m *Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != nil {
		n += m.Term.Size()
	}
	return n
}

func (m *Index_Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Column)
	n += 1 + l + sovChainSchema(uint64(l))
	return n
}
func (m *Index_Fncall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fncall != nil {
		l = m.Fncall.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}
func (m *Index_FnCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fn != 0 {
		n += 1 + sovChainSchema(uint64(m.Fn))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovChainSchema(uint64(l))
		}
	}
	return n
}

func (m *Index_FnArg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainSchema(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovChainSchema(uint64(l))
	}
	return n
}

func (m *AnInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovChainSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainSchema(x uint64) (n int) {
	return sovChainSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TypeRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeRef{`,
		`Info:` + fmt.Sprintf("%v", this.Info) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeRef_Primitive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeRef_Primitive{`,
		`Primitive:` + fmt.Sprintf("%v", this.Primitive) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeRef_DefinedType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeRef_DefinedType{`,
		`DefinedType:` + fmt.Sprintf("%v", this.DefinedType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeRef_Array) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeRef_Array{`,
		`Array:` + strings.Replace(fmt.Sprintf("%v", this.Array), "TypeRef", "TypeRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeRef_Optional) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeRef_Optional{`,
		`Optional:` + strings.Replace(fmt.Sprintf("%v", this.Optional), "TypeRef", "TypeRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeDefinition{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Experimental:` + fmt.Sprintf("%v", this.Experimental) + `,`,
		`Info:` + fmt.Sprintf("%v", this.Info) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeDefinition_Struct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeDefinition_Struct{`,
		`Struct:` + strings.Replace(fmt.Sprintf("%v", this.Struct), "Struct", "Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeDefinition_Enum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeDefinition_Enum{`,
		`Enum:` + strings.Replace(fmt.Sprintf("%v", this.Enum), "Enum", "Enum", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeDefinition_Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeDefinition_Interface{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "Interface", "Interface", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Struct) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*Field{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(f.String(), "Field", "Field", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&Struct{`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + strings.Replace(this.Type.String(), "TypeRef", "TypeRef", 1) + `,`,
		`ProtoField:` + fmt.Sprintf("%v", this.ProtoField) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Enum) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*EnumValue{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(f.String(), "EnumValue", "EnumValue", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&Enum{`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnumValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnumValue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface{`,
		`Implementers:` + fmt.Sprintf("%v", this.Implementers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Method) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Method{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Input:` + strings.Replace(this.Input.String(), "TypeRef", "TypeRef", 1) + `,`,
		`Output:` + strings.Replace(this.Output.String(), "TypeRef", "TypeRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + strings.Replace(this.Type.String(), "TypeRef", "TypeRef", 1) + `,`,
		`PrimaryKey:` + fmt.Sprintf("%v", this.PrimaryKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table_IndexPartExpression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table_IndexPartExpression{`,
		`Term:` + fmt.Sprintf("%v", this.Term) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table_IndexPartExpression_Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table_IndexPartExpression_Column{`,
		`Column:` + fmt.Sprintf("%v", this.Column) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table_IndexPartExpression_Fncall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table_IndexPartExpression_Fncall{`,
		`Fncall:` + strings.Replace(fmt.Sprintf("%v", this.Fncall), "Table_IndexPartExpression_FnCall", "Table_IndexPartExpression_FnCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table_IndexPartExpression_FnCall) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*Table_IndexPartExpression_FnArg{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(fmt.Sprintf("%v", f), "Table_IndexPartExpression_FnArg", "Table_IndexPartExpression_FnArg", 1) + ","
	}
	repeatedStringForArgs += "}"
	s := strings.Join([]string{`&Table_IndexPartExpression_FnCall{`,
		`Fn:` + fmt.Sprintf("%v", this.Fn) + `,`,
		`Args:` + repeatedStringForArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *Table_IndexPartExpression_FnArg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Table_IndexPartExpression_FnArg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Table_IndexPartExpression", "Table_IndexPartExpression", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModuleDef) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTypedefs := "[]*TypeDefinition{"
	for _, f := range this.Typedefs {
		repeatedStringForTypedefs += strings.Replace(f.String(), "TypeDefinition", "TypeDefinition", 1) + ","
	}
	repeatedStringForTypedefs += "}"
	repeatedStringForMethods := "[]*Method{"
	for _, f := range this.Methods {
		repeatedStringForMethods += strings.Replace(f.String(), "Method", "Method", 1) + ","
	}
	repeatedStringForMethods += "}"
	repeatedStringForTables := "[]*Table{"
	for _, f := range this.Tables {
		repeatedStringForTables += strings.Replace(f.String(), "Table", "Table", 1) + ","
	}
	repeatedStringForTables += "}"
	s := strings.Join([]string{`&ModuleDef{`,
		`Typedefs:` + repeatedStringForTypedefs + `,`,
		`Methods:` + repeatedStringForMethods + `,`,
		`Tables:` + repeatedStringForTables + `,`,
		`}`,
	}, "")
	return s
}
func (this *Index) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Index{`,
		`Term:` + fmt.Sprintf("%v", this.Term) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Index_Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Index_Column{`,
		`Column:` + fmt.Sprintf("%v", this.Column) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Index_Fncall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Index_Fncall{`,
		`Fncall:` + strings.Replace(fmt.Sprintf("%v", this.Fncall), "Index_FnCall", "Index_FnCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Index_FnCall) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*Index_FnArg{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(fmt.Sprintf("%v", f), "Index_FnArg", "Index_FnArg", 1) + ","
	}
	repeatedStringForArgs += "}"
	s := strings.Join([]string{`&Index_FnCall{`,
		`Fn:` + fmt.Sprintf("%v", this.Fn) + `,`,
		`Args:` + repeatedStringForArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *Index_FnArg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Index_FnArg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Value:` + strings.Replace(this.Value.String(), "Index", "Index", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnInterface{`,
		`}`,
	}, "")
	return s
}
func valueToStringChainSchema(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TypeRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primitive", wireType)
			}
			var v PrimitiveType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PrimitiveType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Info = &TypeRef_Primitive{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinedType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Info = &TypeRef_DefinedType{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TypeRef{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &TypeRef_Array{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optional", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TypeRef{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &TypeRef_Optional{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			m.Namespace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Namespace |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experimental", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Experimental = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Struct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &TypeDefinition_Struct{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Enum{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &TypeDefinition_Enum{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Interface{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &TypeDefinition_Interface{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Struct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Struct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Struct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TypeRef{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoField", wireType)
			}
			m.ProtoField = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtoField |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &EnumValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnumValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChainSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Implementers = append(m.Implementers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChainSchema
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChainSchema
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChainSchema
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Implementers) == 0 {
					m.Implementers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainSchema
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Implementers = append(m.Implementers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Implementers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Method) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Method: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Method: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MethodType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &TypeRef{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &TypeRef{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TypeRef{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = append(m.PrimaryKey, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table_IndexPartExpression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexPartExpression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexPartExpression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = &Table_IndexPartExpression_Column{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fncall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Table_IndexPartExpression_FnCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Term = &Table_IndexPartExpression_Fncall{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table_IndexPartExpression_FnCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FnCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FnCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fn", wireType)
			}
			m.Fn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &Table_IndexPartExpression_FnArg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table_IndexPartExpression_FnArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FnArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FnArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Table_IndexPartExpression{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typedefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Typedefs = append(m.Typedefs, &TypeDefinition{})
			if err := m.Typedefs[len(m.Typedefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methods = append(m.Methods, &Method{})
			if err := m.Methods[len(m.Methods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, &Table{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = &Index_Column{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fncall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Index_FnCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Term = &Index_Fncall{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Index_FnCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FnCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FnCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fn", wireType)
			}
			m.Fn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &Index_FnArg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Index_FnArg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FnArg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FnArg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Index{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChainSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainSchema = fmt.Errorf("proto: unexpected end of group")
)
